{"version":3,"sources":["core/emitter.coffee"],"names":[],"mappings":"AAAA,IAAA,6BAAA;EAAA;iSAAA;;AAAA,MAAQ,OAAA,CAAQ,SAAR,EAAP,GAAD,CAAA;;AAEA;AAAA;;;;;;GAFA;;AAAA,MASM,CAAC,OAAP,GACM;AACS,EAAA,iBAAE,SAAF,GAAA;AACX,IADY,IAAC,CAAA,gCAAA,YAAY,EACzB,CAAA;AAAA,IAAA,IAAC,CAAA,QAAD,GAAgB,IAAA,eAAA,CAAA,CAAhB,CADW;EAAA,CAAb;;AAAA,oBAIA,SAAA,GAAW,SAAC,EAAD,EAAK,SAAL,GAAA;WACL,IAAA,GAAA,CAAI,GAAG,CAAC,SAAR,EAAmB,EAAnB,EAAuB,SAAvB,EAAkC,IAAC,CAAA,SAAnC,EADK;EAAA,CAJX,CAAA;;AAAA,oBAQA,OAAA,GAAS,SAAC,EAAD,EAAK,SAAL,GAAA;WACH,IAAA,GAAA,CAAI,GAAG,CAAC,OAAR,EAAiB,EAAjB,EAAqB,SAArB,EAAgC,IAAC,CAAA,SAAjC,EADG;EAAA,CART,CAAA;;AAAA,oBAYA,IAAA,GAAM,SAAC,EAAD,EAAK,SAAL,GAAA;WACA,IAAA,GAAA,CAAI,GAAG,CAAC,IAAR,EAAc,EAAd,EAAkB,SAAlB,EAA6B,IAAC,CAAA,SAA9B,EADA;EAAA,CAZN,CAAA;;AAAA,oBAgBA,SAAA,GAAW,SAAC,EAAD,EAAK,SAAL,GAAA;WACL,IAAA,GAAA,CAAI,GAAG,CAAC,SAAR,EAAmB,EAAnB,EAAuB,SAAvB,EAAkC,IAAC,CAAA,SAAnC,EADK;EAAA,CAhBX,CAAA;;AAAA,oBAmBA,OAAA,GAAS,SAAA,GAAA;WACH,IAAA,GAAA,CAAI,GAAG,CAAC,OAAR,EAAiB,IAAjB,EAAuB,IAAvB,EAA6B,IAAC,CAAA,SAA9B,EADG;EAAA,CAnBT,CAAA;;iBAAA;;IAXF,CAAA;;AAAA;AAkCE,oCAAA,CAAA;;AAAa,EAAA,yBAAA,GAAA;AACX,IAAA,IAAC,CAAA,SAAD,GAAa;AAAA,MAAA,QAAA,EAAU,IAAV;KAAb,CADW;EAAA,CAAb;;yBAAA;;GAD4B,QAjC9B,CAAA","file":"core/emitter.js","sourceRoot":"/source/","sourcesContent":["{Def} = require './token'\n\n###\nUsed when defining language rules with {LanguagePack} APIs.\n\nAn emitter method does not actually emit any tokens when called, but creating\na definition or contract of tokens that will be emitted once the corresponding\nrule is matched.\n###\nmodule.exports =\nclass Emitter\n  constructor: (@modifiers = {}) ->\n    @optional = new OptionalEmitter()\n\n  # @return {Token.Def} A token definition\n  attribute: (id, transform) ->\n    new Def(Def.Attribute, id, transform, @modifiers)\n\n  # @return {Token.Def} A token definition\n  content: (id, transform) ->\n    new Def(Def.Content, id, transform, @modifiers)\n\n  # @return {Token.Def} A token definition\n  text: (id, transform) ->\n    new Def(Def.Text, id, transform, @modifiers)\n\n  # @return {Token.Def} A token definition\n  delimiter: (id, transform) ->\n    new Def(Def.Delimiter, id, transform, @modifiers)\n\n  nothing: ->\n    new Def(Def.Nothing, null, null, @modifiers)\n\nclass OptionalEmitter extends Emitter\n  constructor: ->\n    @modifiers = optional: true\n"]}