{"version":3,"sources":["core/emitter.coffee"],"names":[],"mappings":"AAAA,IAAA,YAAA;;AAAA,MAAQ,OAAA,CAAQ,SAAR,EAAP,GAAD,CAAA;;AAEA;AAAA;;;;;;GAFA;;AAAA,MASM,CAAC,OAAP,GACM;uBAEJ;;AAAA,oBAAA,SAAA,GAAW,SAAC,EAAD,EAAK,SAAL,GAAA;WACL,IAAA,GAAA,CAAI,GAAG,CAAC,SAAR,EAAmB,EAAnB,EAAuB,SAAvB,EADK;EAAA,CAAX,CAAA;;AAAA,oBAIA,OAAA,GAAS,SAAC,EAAD,EAAK,SAAL,GAAA;WACH,IAAA,GAAA,CAAI,GAAG,CAAC,OAAR,EAAiB,EAAjB,EAAqB,SAArB,EADG;EAAA,CAJT,CAAA;;AAAA,oBAQA,IAAA,GAAM,SAAC,EAAD,EAAK,SAAL,GAAA;WACA,IAAA,GAAA,CAAI,GAAG,CAAC,IAAR,EAAc,EAAd,EAAkB,SAAlB,EADA;EAAA,CARN,CAAA;;AAAA,oBAYA,SAAA,GAAW,SAAC,EAAD,EAAK,SAAL,GAAA;WACL,IAAA,GAAA,CAAI,GAAG,CAAC,SAAR,EAAmB,EAAnB,EAAuB,SAAvB,EADK;EAAA,CAZX,CAAA;;iBAAA;;IAZF,CAAA","file":"core/emitter.js","sourceRoot":"/source/","sourcesContent":["{Def} = require './token'\n\n###\nUsed when defining language rules with {LanguagePack} APIs.\n\nAn emitter method does not actually emit any tokens when called, but creating\na definition or contract of tokens that will be emitted once the corresponding\nrule is matched.\n###\nmodule.exports =\nclass Emitter\n  # @return {Token.Def} A token definition\n  attribute: (id, transform) ->\n    new Def(Def.Attribute, id, transform)\n\n  # @return {Token.Def} A token definition\n  content: (id, transform) ->\n    new Def(Def.Content, id, transform)\n\n  # @return {Token.Def} A token definition\n  text: (id, transform) ->\n    new Def(Def.Text, id, transform)\n\n  # @return {Token.Def} A token definition\n  delimiter: (id, transform) ->\n    new Def(Def.Delimiter, id, transform)\n"]}