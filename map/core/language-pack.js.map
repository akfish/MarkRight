{"version":3,"sources":["core/language-pack.coffee"],"names":[],"mappings":"AAAA,IAAA,8CAAA;;AAAA,WAAA,GAAc,OAAA,CAAQ,gBAAR,CAAd,CAAA;;AAAA,OACA,GAAU,OAAA,CAAQ,WAAR,CADV,CAAA;;AAAA,aAEe,OAAA,CAAQ,QAAR,EAAd,UAFD,CAAA;;AAIA;AAAA;;GAJA;;AAAA,MAOM,CAAC,OAAP,GACM;AAEJ,yBAAA,IAAA,GAAU,IAAA,OAAA,CAAA,CAAV,CAAA;;AAEa,EAAA,sBAAE,EAAF,GAAA;AACX,IADY,IAAC,CAAA,KAAA,EACb,CAAA;AAAA,IAAA,IAAC,CAAA,QAAD,GAAgB,IAAA,WAAA,CAAA,CAAhB,CAAA;AAAA,IACA,IAAC,CAAA,UAAD,GAAkB,IAAA,UAAA,CAAW,SAAC,CAAD,GAAA;aAAO,CAAC,CAAC,KAAT;IAAA,CAAX,CADlB,CAAA;AAAA,IAEA,IAAC,CAAA,WAAD,GAAmB,IAAA,UAAA,CAAW,SAAC,CAAD,GAAA;aAAO,CAAC,CAAC,KAAT;IAAA,CAAX,CAFnB,CADW;EAAA,CAFb;;AAAA,yBAOA,YAAA,GAAc,SAAC,KAAD,EAAQ,KAAR,GAAA;WACZ,IAAC,CAAA,QAAQ,CAAC,YAAV,CAAuB,KAAvB,EAA8B,KAA9B,EADY;EAAA,CAPd,CAAA;;AAAA,yBAUA,oBAAA,GAAsB,SAAC,IAAD,EAAO,KAAP,GAAA,CAVtB,CAAA;;AAAA,yBAaA,YAAA,GAAc,SAAC,IAAD,EAAO,IAAP,EAAa,OAAb,GAAA;AACZ,QAAA,UAAA;AAAA,IAAA,UAAA,GAAa,IAAC,CAAA,QAAQ,CAAC,IAAV,CAAe,IAAf,EAAqB,OAArB,CAAb,CAAA;AAAA,IACA,UAAU,CAAC,IAAX,GAAkB,IADlB,CAAA;AAAA,IAEA,UAAU,CAAC,IAAX,GAAkB,OAFlB,CAAA;WAGA,IAAC,CAAA,UAAU,CAAC,IAAZ,CAAiB,UAAjB,EAJY;EAAA,CAbd,CAAA;;AAAA,yBAmBA,aAAA,GAAe,SAAC,IAAD,EAAO,IAAP,EAAa,OAAb,GAAA;AACb,QAAA,UAAA;AAAA,IAAA,UAAA,GAAa,IAAC,CAAA,QAAQ,CAAC,IAAV,CAAe,IAAf,EAAqB,OAArB,CAAb,CAAA;AAAA,IACA,UAAU,CAAC,IAAX,GAAkB,IADlB,CAAA;AAAA,IAEA,UAAU,CAAC,IAAX,GAAkB,QAFlB,CAAA;WAGA,IAAC,CAAA,WAAW,CAAC,IAAb,CAAkB,UAAlB,EAJa;EAAA,CAnBf,CAAA;;sBAAA;;IAVF,CAAA","file":"core/language-pack.js","sourceRoot":"/source/","sourcesContent":["RuleBuilder = require './rule-builder'\nEmitter = require './emitter'\n{OrderedMap} = require './util'\n\n###\nBase class for language packs\n###\nmodule.exports =\nclass LanguagePack\n  # @property [Emitter] An {Emitter} instance\n  emit: new Emitter()\n\n  constructor: (@ns) ->\n    @_builder = new RuleBuilder()\n    @blockRules = new OrderedMap((r) -> r.name)\n    @inlineRules = new OrderedMap((r) -> r.name)\n\n  declareAlias: (alias, regex) ->\n    @_builder.declareAlias(alias, regex)\n\n  declareDelimiterPair: (open, close) ->\n    # TODO: used for hot update mode, implement later\n\n  addBlockRule: (name, rule, emitter) ->\n    built_rule = @_builder.make(rule, emitter)\n    built_rule.name = name\n    built_rule.type = 'block'\n    @blockRules.push built_rule\n\n  addInlineRule: (name, rule, emitter) ->\n    built_rule = @_builder.make(rule, emitter)\n    built_rule.name = name\n    built_rule.type = 'inline'\n    @inlineRules.push built_rule\n"]}