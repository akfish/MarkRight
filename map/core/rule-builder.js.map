{"version":3,"sources":["core/rule-builder.coffee"],"names":[],"mappings":"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","file":"core/rule-builder.js","sourceRoot":"/source/","sourcesContent":["{Def} = require './token'\n# {RuleBuilder} is used by {LanguagePack} internally to compile rules for parser\n# to execute.\n#\n# ## Terminology\n#\n# * **Rule decleration**s are made with API calls in {LanguagePack} to specify\n#   the syantax of a language feature with regex as well as how relevent data is\n#   captured and emitted into tokens.\n# * **Rule**s are compiled declarations each of which consists of a regex and a\n#   handler function. The latter emits a token or manipulates the parent token.\n#\n# For more information on how to decalre a rule, see {LanguagePack}.\nmodule.exports =\nclass RuleBuilder\n  constructor: ->\n    @_aliasMap = {}\n\n  declareAlias: (alias, regex) ->\n    # TODO: check for duplication\n    @_aliasMap[alias] = regex\n\n  # @private\n  #\n  # Get the string representation of a regex part for concatenatiion.\n  #\n  # @overload _getRegexPart(alias_or_literal)\n  #   The argument is searched in the alias map first. If no match is found, it\n  #   is then considered as a literal regex source string.\n  #   The literal string will be escaped. For example, `'^[()]'` is processed to\n  #   `/\\^\\[\\(\\)\\]/`.\n  #   @param [string] alias_or_literal\n  # @overload _getRegexPart(regex)\n  #   @param [RegExp] regex\n  # @return [string] Regex part's string source\n  _getRegexPart: (r) ->\n    t = typeof r\n    if t == 'string'\n      if r of @_aliasMap\n        # Alias\n        return @_aliasMap[r]\n      # Literal\n      return r.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')\n    else if t == 'object' and r instanceof RegExp\n      return r.source\n    throw new TypeError(\"#{r} is not a valid alias name, string or RegExp\")\n\n  _makeMatchHandler: (token_defs) ->\n    return (node, matches) ->\n      for d in token_defs\n        payload = match = matches[d.group_index]\n        if d.transform?\n          payload = d.transform(payload)\n\n        node[d.id] = payload\n        # TODO: use node.attachXxx accroding to d.type field\n\n\n  # @param {RegExp} rule\n  # @param {Object} capture_map\n  make: (rule, capture_map) ->\n    regex_src = ''\n    group_index = 0\n    token_defs = []\n    in_optional_group = false\n    current_optional_group = \"\"\n\n    for r, i in rule\n      token_def = capture_map?[i + 1]\n\n      could_capture = token_def?\n\n      part = @_getRegexPart(r)\n      if could_capture\n        lazy_leaving = in_optional_group and not token_def.optional?\n        optional_changing = (token_def.optional ? false) != in_optional_group\n        if lazy_leaving or optional_changing\n          if not in_optional_group\n            # false -> true, entering optional group\n            group_index++\n            in_optional_group = true\n          else\n            # true -> false, leaving optional group\n            in_optional_group = false\n            regex_src += \"(#{current_optional_group})?\"\n            current_optional_group = \"\"\n        if token_def.type != Def.Nothing\n          group_index++\n          part = \"(#{part})\"\n          token_defs.push token_def\n          token_def.group_index = group_index\n      else if in_optional_group\n        # true -> false, leaving optional group\n        in_optional_group = false\n        regex_src += \"(#{current_optional_group})?\"\n        current_optional_group = \"\"\n      if in_optional_group\n        current_optional_group += part\n      else\n        regex_src += part\n\n    result =\n      regex: new RegExp(regex_src)\n      handler: @_makeMatchHandler(token_defs)\n    return result\n"]}