{"version":3,"sources":["core/rule-builder.coffee"],"names":[],"mappings":"AAAA,IAAA,WAAA;;AAAA,MAAM,CAAC,OAAP,GACM;AACS,EAAA,qBAAA,GAAA;AACX,IAAA,IAAC,CAAA,SAAD,GAAa,EAAb,CADW;EAAA,CAAb;;AAAA,wBAGA,YAAA,GAAc,SAAC,KAAD,EAAQ,KAAR,GAAA;WAEZ,IAAC,CAAA,SAAU,CAAA,KAAA,CAAX,GAAoB,MAFR;EAAA,CAHd,CAAA;;AAAA,wBAOA,aAAA,GAAe,SAAC,gBAAD,GAAA,CAPf,CAAA;;AAAA,wBAUA,iBAAA,GAAmB,SAAC,UAAD,GAAA;AACjB,WAAO,SAAC,IAAD,EAAO,OAAP,GAAA;AACL,UAAA,qCAAA;AAAA;WAAA,iDAAA;2BAAA;AACE,QAAA,OAAA,GAAU,KAAA,GAAQ,OAAQ,CAAA,CAAC,CAAC,WAAF,CAA1B,CAAA;AACA,QAAA,IAAG,mBAAH;wBACE,OAAA,GAAU,CAAC,CAAC,SAAF,CAAY,OAAZ,GADZ;SAAA,MAAA;gCAAA;SAFF;AAAA;sBADK;IAAA,CAAP,CADiB;EAAA,CAVnB,CAAA;;AAAA,wBAoBA,IAAA,GAAM,SAAC,IAAD,EAAO,OAAP,GAAA;AACJ,QAAA,mFAAA;AAAA,IAAA,SAAA,GAAY,EAAZ,CAAA;AAAA,IACA,WAAA,GAAc,CADd,CAAA;AAAA,IAEA,UAAA,GAAa,EAFb,CAAA;AAGA,SAAA,mDAAA;kBAAA;AACE,MAAA,SAAA,GAAY,OAAQ,CAAA,CAAA,CAApB,CAAA;AAAA,MACA,cAAA,GAAiB,iBADjB,CAAA;AAAA,MAGA,IAAA,GAAO,aAAA,CAAc,CAAd,CAHP,CAAA;AAIA,MAAA,IAAG,cAAH;AACE,QAAA,IAAA,GAAQ,GAAA,GAAG,IAAH,GAAQ,GAAhB,CADF;OAJA;AAAA,MAMA,SAAA,IAAa,IANb,CAAA;AAAA,MAOA,WAAA,EAPA,CAAA;AAAA,MASA,SAAS,CAAC,WAAV,GAAwB,WATxB,CAAA;AAAA,MAUA,UAAU,CAAC,IAAX,CAAgB,SAAhB,CAVA,CADF;AAAA,KAHA;AAgBA,WAAO;AAAA,MAAA,KAAA,EAAW,IAAA,MAAA,CAAO,SAAP,CAAA,CAChB;AAAA,QAAA,OAAA,EAAS,IAAC,CAAA,iBAAD,CAAmB,UAAnB,CAAT;OADgB,CAAX;KAAP,CAjBI;EAAA,CApBN,CAAA;;qBAAA;;IAFF,CAAA","file":"core/rule-builder.js","sourceRoot":"/source/","sourcesContent":["module.exports =\nclass RuleBuilder\n  constructor: ->\n    @_aliasMap = {}\n\n  declareAlias: (alias, regex) ->\n    # TODO: check for duplication\n    @_aliasMap[alias] = regex\n\n  _getRegexPart: (alias_or_literal) ->\n    # TODO: fetch regex part from alias map or parse from literal\n\n  _makeMatchHandler: (token_defs) ->\n    return (node, matches) ->\n      for d in token_defs\n        payload = match = matches[d.group_index]\n        if d.transform?\n          payload = d.transform(payload)\n\n        # TODO: attach payload to node\n\n        \n  make: (rule, emitter) ->\n    regex_src = ''\n    group_index = 0\n    token_defs = []\n    for r, i in rule\n      token_def = emitter[i]\n      should_capture = token_def?\n\n      part = _getRegexPart(r)\n      if should_capture\n        part = \"(#{part})\"\n      regex_src += part\n      group_index++\n\n      token_def.group_index = group_index\n      token_defs.push token_def\n\n    return regex: new Regexp(regex_src)\n      handler: @_makeMatchHandler(token_defs)\n"]}