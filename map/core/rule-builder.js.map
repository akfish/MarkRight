{"version":3,"sources":["core/rule-builder.coffee"],"names":[],"mappings":"AAYA,IAAA,WAAA;;AAAA,MAAM,CAAC,OAAP,GACM;AACS,EAAA,qBAAA,GAAA;AACX,IAAA,IAAC,CAAA,SAAD,GAAa,EAAb,CADW;EAAA,CAAb;;AAAA,wBAGA,YAAA,GAAc,SAAC,KAAD,EAAQ,KAAR,GAAA;WAEZ,IAAC,CAAA,SAAU,CAAA,KAAA,CAAX,GAAoB,MAFR;EAAA,CAHd,CAAA;;AAAA,wBAkBA,aAAA,GAAe,SAAC,CAAD,GAAA;AACb,QAAA,CAAA;AAAA,IAAA,CAAA,GAAI,MAAA,CAAA,CAAJ,CAAA;AACA,IAAA,IAAG,CAAA,KAAK,QAAR;AACE,MAAA,IAAG,CAAA,IAAK,IAAC,CAAA,SAAT;AACE,eAAO,IAAC,CAAA,SAAU,CAAA,CAAA,CAAlB,CADF;OAAA;AAGA,aAAO,CAAP,CAJF;KAAA,MAKK,IAAG,CAAA,KAAK,QAAL,IAAkB,CAAA,YAAa,MAAlC;AACH,aAAO,CAAC,CAAC,MAAT,CADG;KANL;AAQA,UAAU,IAAA,SAAA,CAAU,EAAA,GAAG,CAAH,GAAK,8CAAf,CAAV,CATa;EAAA,CAlBf,CAAA;;AAAA,wBA6BA,iBAAA,GAAmB,SAAC,UAAD,GAAA;AACjB,WAAO,SAAC,IAAD,EAAO,OAAP,GAAA;AACL,UAAA,qCAAA;AAAA;WAAA,iDAAA;2BAAA;AACE,QAAA,OAAA,GAAU,KAAA,GAAQ,OAAQ,CAAA,CAAC,CAAC,WAAF,CAA1B,CAAA;AACA,QAAA,IAAG,mBAAH;AACE,UAAA,OAAA,GAAU,CAAC,CAAC,SAAF,CAAY,OAAZ,CAAV,CADF;SADA;AAAA,sBAIA,IAAK,CAAA,CAAC,CAAC,EAAF,CAAL,GAAa,QAJb,CADF;AAAA;sBADK;IAAA,CAAP,CADiB;EAAA,CA7BnB,CAAA;;AAAA,wBAwCA,IAAA,GAAM,SAAC,IAAD,EAAO,OAAP,GAAA;AACJ,QAAA,2FAAA;AAAA,IAAA,SAAA,GAAY,EAAZ,CAAA;AAAA,IACA,WAAA,GAAc,CADd,CAAA;AAAA,IAEA,UAAA,GAAa,EAFb,CAAA;AAGA,SAAA,mDAAA;kBAAA;AACE,MAAA,SAAA,GAAY,OAAQ,CAAA,CAAA,GAAI,CAAJ,CAApB,CAAA;AAAA,MACA,cAAA,GAAiB,iBADjB,CAAA;AAAA,MAGA,IAAA,GAAO,IAAC,CAAA,aAAD,CAAe,CAAf,CAHP,CAAA;AAIA,MAAA,IAAG,cAAH;AACE,QAAA,IAAA,GAAQ,GAAA,GAAG,IAAH,GAAQ,GAAhB,CAAA;AAAA,QACA,WAAA,EADA,CAAA;AAAA,QAEA,SAAS,CAAC,WAAV,GAAwB,WAFxB,CAAA;AAAA,QAGA,UAAU,CAAC,IAAX,CAAgB,SAAhB,CAHA,CADF;OAJA;AAAA,MASA,SAAA,IAAa,IATb,CADF;AAAA,KAHA;AAAA,IAeA,MAAA,GACE;AAAA,MAAA,KAAA,EAAW,IAAA,MAAA,CAAO,SAAP,CAAX;AAAA,MACA,OAAA,EAAS,IAAC,CAAA,iBAAD,CAAmB,UAAnB,CADT;KAhBF,CAAA;AAkBA,WAAO,MAAP,CAnBI;EAAA,CAxCN,CAAA;;qBAAA;;IAFF,CAAA","file":"core/rule-builder.js","sourceRoot":"/source/","sourcesContent":["# {RuleBuilder} is used by {LanguagePack} internally to compile rules for parser\n# to execute.\n#\n# ## Terminology\n#\n# * **Rule decleration**s are made with API calls in {LanguagePack} to specify\n#   the syantax of a language feature with regex as well as how relevent data is\n#   captured and emitted into tokens.\n# * **Rule**s are compiled declarations each of which consists of a regex and a\n#   handler function. The latter emits a token or manipulates the parent token.\n#\n# For more information on how to decalre a rule, see {LanguagePack}.\nmodule.exports =\nclass RuleBuilder\n  constructor: ->\n    @_aliasMap = {}\n\n  declareAlias: (alias, regex) ->\n    # TODO: check for duplication\n    @_aliasMap[alias] = regex\n\n  # @private\n  #\n  # Get the string representation of a regex part for concatenatiion.\n  #\n  # @overload _getRegexPart(alias_or_literal)\n  #   The argument is searched in the alias map first. If no match is found, it\n  #   is then considered as a literal regex source string.\n  #   @param [string] alias_or_literal\n  # @overload _getRegexPart(regex)\n  #   @param [RegExp] regex\n  # @return [string] Regex part's string source\n  _getRegexPart: (r) ->\n    t = typeof r\n    if t == 'string'\n      if r of @_aliasMap\n        return @_aliasMap[r]\n      # TODO: escape\n      return r\n    else if t == 'object' and r instanceof RegExp\n      return r.source\n    throw new TypeError(\"#{r} is not a valid alias name, string or RegExp\")\n\n  _makeMatchHandler: (token_defs) ->\n    return (node, matches) ->\n      for d in token_defs\n        payload = match = matches[d.group_index]\n        if d.transform?\n          payload = d.transform(payload)\n\n        node[d.id] = payload\n        # TODO: attach payload to node\n\n\n  make: (rule, emitter) ->\n    regex_src = ''\n    group_index = 0\n    token_defs = []\n    for r, i in rule\n      token_def = emitter[i + 1]\n      should_capture = token_def?\n\n      part = @_getRegexPart(r)\n      if should_capture\n        part = \"(#{part})\"\n        group_index++\n        token_def.group_index = group_index\n        token_defs.push token_def\n      regex_src += part\n\n    result =\n      regex: new RegExp(regex_src)\n      handler: @_makeMatchHandler(token_defs)\n    return result\n"]}