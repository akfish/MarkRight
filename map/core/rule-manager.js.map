{"version":3,"sources":["core/rule-manager.coffee"],"names":[],"mappings":"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","file":"core/rule-manager.js","sourceRoot":"/source/","sourcesContent":["{OrderedMap} = require './util'\n\n# Manage language rules for a compiler instance\n#\n# Rules are grouped into {LanguagePack}s and added in batch.\n# The orders are persevered for parsers to handle precedence.\n# All rules are enabled by default. However users can enable/disable a specific\n# set of rules.\n# Enabled rule lists are updated lazily just before the compiler asks for the\n# rules.\nmodule.exports =\nclass RuleManager\n  constructor: ->\n    @_isDirty = false\n    @_packs = new OrderedMap((p) -> p.ns)\n    @_cached_blocks = []\n    @_cached_inlines = []\n\n  _updateCache: ->\n    if not @_isDirty\n      return\n\n    @_cached_blocks = []\n    @_cached_inlines = []\n\n    @_packs.each (pack) =>\n      blocks = pack.blockRules.filter (r) -> r.enabled\n      inlines = pack.inlineRules.filter (r) -> r.enabled\n      @_cached_blocks = @_cached_blocks.concat blocks\n      @_cached_inlines = @_cached_inlines.concat inlines\n\n    @_isDirty = false\n\n  @property 'blockRules',\n    get: ->\n      @_updateCache()\n      return @_cached_blocks\n\n  @property 'inlineRules',\n    get: ->\n      @_updateCache()\n      return @_cached_inlines\n\n  # Add rules from a {LanguagePack}\n  # @param {LanguagePack} pack\n  addLanguagePack: (pack) ->\n    pack.blockRules.each (r) -> r.enabled = true\n    pack.inlineRules.each (r) -> r.enabled = true\n    @_packs.push pack\n    @_isDirty = true\n\n  # Remove rules from a {LanguagePack}\n  # @param {string} ns namespace of the {LanguagePack} to be removed\n  removeLanguagePack: (ns) ->\n    @_packs.remove ns\n\n  # Toggle all or some of the rules in a {LanguagePack}. If the second argument\n  # is `null` or empty, all rules will be toggled.\n  # @param {string} ns namespace of a {LanguagePack}\n  # @param {boolean} enabled toggle specified features to this value\n  # @param {Array<string>} features names of features to be toggled.\n  toggle: (ns, enabled, features) ->\n    pack = @_packs.get(ns)\n    if not pack?\n      throw new ReferenceError(\"Unknown language pack '#{ns}'\")\n    if features? and not Array.isArray(features)\n      throw new TypeError('Expect an Array of feature names')\n      return\n\n    if not features? or features.length == 0\n      pack.blockRules.each (r) -> r.enabled = enabled\n      pack.inlineRules.each (r) -> r.enabled = enabled\n    else\n      pack.blockRules.each (r) -> r.enabled = not enabled\n      pack.inlineRules.each (r) -> r.enabled = not enabled\n      for f in features\n        if pack.blockRules.has(f)\n          pack.blockRules.get(f).enabled = enabled\n        else if pack.inlineRules.has(f)\n          pack.inlineRules.get(f).enabled = enabled\n    @_isDirty = true\n\n  # Enable all or some of the rules in a {LanguagePack}. If the second argument\n  # is `null` or empty, all rules will be enabled.\n  # @param {string} ns namespace of a {LanguagePack}\n  # @param {Array<string>} features names of features to be enabled.\n  enable: (ns, features) ->\n    @toggle ns, true, features\n\n  # Disable all or some of the rules in a {LanguagePack}. If the second argument\n  # is `null` or empty, all rules will be disable.\n  # @param {string} ns namespace of a {LanguagePack}\n  # @param {Array<string>} features names of features to be disable.\n  disable: (ns, features) ->\n    @toggle ns, false, features\n"]}