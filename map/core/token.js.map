{"version":3,"sources":["core/token.coffee"],"names":[],"mappings":"AAgDA,IAAA,eAAA;;AAAA,MAAM,CAAC,OAAP,GACM;qBAEJ;;AAAA,kBAAA,IAAA,GAAM,IAAN,CAAA;;AAAA,kBAGA,IAAA,GAAM,IAHN,CAAA;;AAAA,kBAMA,MAAA,GAAQ,IANR,CAAA;;AAAA,kBASA,QAAA,GAAU,EATV,CAAA;;AAAA,kBAYA,UAAA,GAAY,IAZZ,CAAA;;AAAA,kBAeA,WAAA,GAAa,IAfb,CAAA;;AAAA,kBAkBA,WAAA,GAAa,IAlBb,CAAA;;eAAA;;IAHF,CAAA;;AAAA,MAyBM,CAAC,OAAO,CAAC,GAAf,GACM;AACJ,EAAA,QAAC,CAAA,SAAD,GAAY,WAAZ,CAAA;;AAAA,EACA,QAAC,CAAA,OAAD,GAAU,SADV,CAAA;;AAAA,EAEA,QAAC,CAAA,IAAD,GAAO,MAFP,CAAA;;AAAA,EAGA,QAAC,CAAA,SAAD,GAAY,WAHZ,CAAA;;AAKa,EAAA,kBAAE,IAAF,EAAS,EAAT,EAAc,SAAd,GAAA;AAA0B,IAAzB,IAAC,CAAA,OAAA,IAAwB,CAAA;AAAA,IAAlB,IAAC,CAAA,KAAA,EAAiB,CAAA;AAAA,IAAb,IAAC,CAAA,YAAA,SAAY,CAA1B;EAAA,CALb;;kBAAA;;IA3BF,CAAA","file":"core/token.js","sourceRoot":"/source/","sourcesContent":["# Tokens are building blocks of parsed documents. Each rule is evaluated and\n# capture groups are transformed into tokens. For information on how tokens\n# are emitted from language rules, see {LanguagePack}.\n#\n# A token contains necessary information to represent a Markdown element,\n# including its location in source code, data fields and etc. For simplicity,\n# MarkRight uses tokens as AST nodes directly instead of creating new ones.\n#\n# ## Token Hierarchies\n#\n# Tokens are connected with each other in a few diffrent ways to form diffrent\n# representations of the same document.\n#\n# ### Linear List\n#\n# Tokens are chained together in a double-linked list fasion for linear access.\n# Each token holds a {Token#prev} and {Token#next} fields linking to tokens\n# before and after.\n#\n# The order is determined by token's position in the document. An element may\n# correspond to one parent token for the whole element as well as a few\n# delimiter children tokens to indicate boundaries. In such case, the parent\n# token comes between the first pair of matched delimiters.\n#\n# ### AST\n#\n# Tokens can also build an abastract syntax tree, with {Token#parent} field\n# pointing to one's direct parent and {Token#children} holds an array of\n# children. Children are also chained together in a double-linked list with\n# {Token#prevSibling} and {Token#nextSibling}. A single document token is used\n# as the parent for all top level tokens to form a single-root structure.\n#\n# ### Outline\n#\n# Heading tokens are linked into a tree to represent the logic structure of a\n# document. Each heading governs a section under itself and holds elements as\n# section content. (Not implemented)\n#\n# @TODO Outline properties\n#\n# ### Quadtree\n#\n# Tokens are also indexed spatially with quadtree. It is usefully for editor\n# developers to look up token by cursor locations.\n#\n# @TODO Quadtree implementation\n#\n# @TODO Token Location\nmodule.exports =\nclass Token\n  # @property {Token} The previous token in document\n  prev: null\n\n  # @property {Token} The next token in document\n  next: null\n\n  # @property {Token} The parent token\n  parent: null\n\n  # @property {Array<Token>} The chilren\n  children: []\n\n  # @property {Token} The first child\n  firstChild: null\n\n  # @property {Token} The previous token under the same parent\n  prevSibling: null\n\n  # @property {Token} The next token under the same parent\n  nextSibling: null\n\n#\n# @todo Add documentation\nmodule.exports.Def =\nclass TokenDef\n  @Attribute: 'attribute'\n  @Content: 'content'\n  @Text: 'text'\n  @Delimiter: 'delimiter'\n\n  constructor: (@type, @id, @transform) ->\n"]}