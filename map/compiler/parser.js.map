{"version":3,"sources":["compiler/parser.coffee"],"names":[],"mappings":"AAAA,IAAA,MAAA;;AAAA,MAAM,CAAC,OAAP,GACM;AACS,EAAA,gBAAA,GAAA,CAAb;;AAAA,mBAEA,KAAA,GAAO,SAAC,GAAD,GAAA;AACL,QAAA,GAAA;AAAA,IAAA,GAAA,GAAM,IAAC,CAAA,YAAD,CAAc,GAAd,CAAN,CAAA;AAAA,IACA,GAAA,GAAM,IAAC,CAAA,YAAD,CAAc,GAAd,CADN,CAAA;AAGA,WAAO,GAAP,CAJK;EAAA,CAFP,CAAA;;AAAA,mBAQA,YAAA,GAAc,SAAC,GAAD,GAAA;AACZ,QAAA,2GAAA;AAAA,IAAA,MAAA,GAAS,CAAT,CAAA;AAAA,IACA,CAAA,GAAI,GAAG,CAAC,MADR,CAAA;AAAA,IAEA,OAAA,GAAU,EAFV,CAAA;AAAA,IAGA,GAAA,GAAM,EAHN,CAAA;AAKA,WAAM,MAAA,GAAS,CAAT,IAAc,OAAO,CAAC,MAAR,GAAiB,CAArC,GAAA;AACE,MAAA,UAAA,GAAa,MAAb,CAAA;AAAA,MACA,cAAA,GAAiB,IAAC,CAAA,kCAAD,CAAoC,MAApC,EAA4C,GAA5C,CADjB,CAAA;AAAA,MAEA,SAAA,GAAY,cAAc,CAAC,UAF3B,CAAA;AAGA,MAAA,IAAG,sBAAH;AACE,QAAA,cAAA,GAAiB,IAAC,CAAA,kBAAD,CAAoB,UAApB,EAAgC,SAAhC,EAA2C,GAA3C,CAAjB,CAAA;AAAA,QACA,OAA2B,IAAC,CAAA,kBAAD,CAAoB,cAApB,EAAoC,GAApC,CAA3B,EAAC,cAAA,MAAD,EAAS,sBAAA,cADT,CADF;OAAA,MAAA;AAIE,QAAA,QAA2B,IAAC,CAAA,kBAAD,CAAoB,UAApB,EAAgC,CAAhC,EAAmC,GAAnC,CAA3B,EAAC,eAAA,MAAD,EAAS,uBAAA,cAAT,CAJF;OAHA;AAAA,MASA,GAAG,CAAC,IAAJ,CAAS,cAAT,CATA,CAAA;AAAA,MAUA,GAAG,CAAC,IAAJ,CAAS,cAAT,CAVA,CADF;IAAA,CALA;AAkBA,WAAO,GAAP,CAnBY;EAAA,CARd,CAAA;;AAAA,mBA6BA,kCAAA,GAAoC,SAAC,MAAD,EAAS,GAAT,GAAA,CA7BpC,CAAA;;AAAA,mBA+BA,kBAAA,GAAoB,SAAC,KAAD,EAAQ,GAAR,EAAa,GAAb,GAAA;AAClB,QAAA,sCAAA;AAAA,IAAA,KAAA,GAAQ,IAAC,CAAA,gBAAD,CAAkB,KAAlB,EAAyB,GAAzB,EAA8B,GAA9B,CAAR,CAAA;AAAA,IACA,eAAA,GAAkB,IAAC,CAAA,kBAAD,CAAoB,KAApB,EAA2B,KAAK,CAAC,UAAN,GAAmB,CAA9C,EAAiD,GAAjD,CADlB,CAAA;AAAA,IAEA,cAAA,GAAkB,IAAC,CAAA,kBAAD,CAAoB,KAAK,CAAC,SAA1B,EAAqC,GAArC,EAA0C,GAA1C,CAFlB,CAAA;AAIA,WAAO,EAAE,CAAC,MAAH,CAAU,eAAV,EAA2B,KAA3B,EAAkC,cAAlC,CAAP,CALkB;EAAA,CA/BpB,CAAA;;AAAA,mBAsCA,kBAAA,GAAoB,SAAC,WAAD,EAAc,GAAd,GAAA,CAtCpB,CAAA;;AAAA,mBAwCA,gBAAA,GAAkB,SAAA,GAAA;WAAG,SAAC,KAAD,EAAQ,GAAR,EAAa,GAAb,GAAA,EAAH;EAAA,CAxClB,CAAA;;AAAA,mBA2CA,YAAA,GAAc,SAAC,GAAD,GAAA,CA3Cd,CAAA;;gBAAA;;IAFF,CAAA","file":"compiler/parser.js","sourceRoot":"/source/","sourcesContent":["module.exports =\nclass Parser\n  constructor: ->\n\n  parse: (src) ->\n    ast = @_parseBlocks(src)\n    ast = @_parseInline(ast)\n\n    return ast\n\n  _parseBlocks: (src) ->\n    offset = 0\n    n = src.length\n    pending = []\n    ast = []\n\n    while offset < n or pending.length > 0\n      startIndex = offset\n      cb_start_token = @__tryParseContainerBlockStartToken(offset, src)\n      lastIndex = cb_start_token.startIndex\n      if cb_start_token?\n        ast_solid_part = @__parseSolidBlocks(startIndex, lastIndex, src)\n        {offset, ast_fluid_part} = @__parseFluidBlocks(cb_start_token, src)\n      else\n        {offset, ast_solid_part} = @__parseSolidBlocks(startIndex, n, src)\n\n      ast.push ast_solid_part\n      ast.push ast_fluid_part\n\n    return ast\n\n  __tryParseContainerBlockStartToken: (offset, src) ->\n\n  __parseSolidBlocks: (begin, end, src) ->\n    block = @___parseOneBlock(begin, end, src)\n    ast_part_before = @__parseSolidBlocks(begin, block.startIndex - 1, src)\n    ast_part_after  = @__parseSolidBlocks(block.lastIndex, end, src)\n\n    return [].concat(ast_part_before, block, ast_part_after)\n\n  __parseFluidBlocks: (start_token, src) ->\n\n  ___parseOneBlock: -> (begin, end, src) ->\n\n\n  _parseInline: (ast) ->\n"]}